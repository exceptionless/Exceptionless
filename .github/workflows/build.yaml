name: Build
on: [ push, pull_request ]
env:
  DOTNET_NOLOGO: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-rc.1.20452.10
    - name: Build Reason
      run: "echo ref: ${{github.ref}} event: ${{github.event_name}}"
    - name: Build Version
      run: |
        dotnet tool install --global minver-cli --version 2.3.0
        version=$(minver --tag-prefix v)
        echo "::set-env name=MINVERVERSIONOVERRIDE::$version"
        echo "::set-env name=VERSION::$version"
    - name: Build
      run: dotnet build --configuration Release
    - name: Start Services
      run: docker-compose up -d elasticsearch && docker-compose up ready
    - name: Run Tests
      run: dotnet test --configuration Release --no-build
    - name: Build Docker Images
      if: github.event_name != 'pull_request'
      run: |
        for image in {"api","job","app","exceptionless"}; do
          docker build --target $image -t ex-$image .
        done
    - name: Log in to GitHub Packages
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com --username ${{ github.actor }} --password-stdin
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
    - name: Push CI Packages
      if: github.event_name != 'pull_request'
      run: |
        # tag and push docker image
        for image in {"api","job","app","exceptionless"}; do
          for tag in {${VERSION},latest}; do
            docker tag ex-$image docker.pkg.github.com/exceptionless/exceptionless/$image:$tag
            docker push docker.pkg.github.com/exceptionless/exceptionless/$image:$tag
          done
        done
        for image in {"api","job","app","exceptionless"}; do
          for tag in {${VERSION},latest}; do
            docker tag ex-$image exceptionless/$image-ci:$tag
            docker push exceptionless/$image-ci:$tag
          done
        done
    - name: Publish Release Packages
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # tag and push docker image
        for image in {"api","job","app","exceptionless"}; do
          for tag in {${VERSION},latest}; do
            docker tag ex-$image exceptionless/$image:$tag
            docker push exceptionless/$image:$tag
          done
        done
    - name: Install Helm
      if: github.event_name != 'pull_request'
      uses: azure/setup-helm@v1
      with:
        version: v3.3.0
    - name: Deploy Changes to Development Environment
      if: github.ref == 'refs/heads/bug/orphaned-data' && github.event_name != 'pull_request'
      run: |
        az login --service-principal --username ${{ secrets.AZ_USERNAME }} --password ${{ secrets.AZ_PASSWORD }} --tenant ${{ secrets.AZ_TENANT }} --output none
        az aks get-credentials --resource-group exceptionless-v6 --name ex-k8s-v6
        sed -i "s/^appVersion:.*$/appVersion: ${VERSION}/" ./k8s/exceptionless/Chart.yaml
        helm upgrade --set "api.image.tag=${VERSION}" --set "jobs.image.tag=${VERSION}" --reuse-values --values ./k8s/ex-dev-values.yaml ex-dev --namespace ex-dev ./k8s/exceptionless
    - name: Deploy Changes to Production Environment
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        az login --service-principal --username ${{ secrets.AZ_USERNAME }} --password ${{ secrets.AZ_PASSWORD }} --tenant ${{ secrets.AZ_TENANT }} --output none
        az aks get-credentials --resource-group exceptionless-v6 --name ex-k8s-v6
        sed -i "s/^appVersion:.*$/appVersion: ${VERSION}/" ./k8s/exceptionless/Chart.yaml
        helm upgrade --set "api.image.tag=${VERSION}" --set "jobs.image.tag=${VERSION}" --reuse-values --values ./k8s/ex-prod-values.yaml ex-prod --namespace ex-prod ./k8s/exceptionless
