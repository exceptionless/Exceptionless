name: Build
on: [push, pull_request]
env:
  TERM: xterm
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:

  version:

    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build Reason
        env:
          GITHUB_EVENT: ${{ toJson(github) }}
        run: "echo ref: ${{github.ref}} event: ${{github.event_name}}"

      - name: Version
        id: version
        run: |
          dotnet tool install --global minver-cli --version 4.3.0
          version=$(minver --tag-prefix v)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "### Version: $version" >> $GITHUB_STEP_SUMMARY

          echo "MINVERVERSIONOVERRIDE=$version" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV

  test-api:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.*
          dotnet-quality: ga

      - name: Start Services
        working-directory: docker
        run: docker compose up -d elasticsearch &

      - name: Build
        run: dotnet build --configuration Release /clp:NoSummary

      - name: Wait for Elasticsearch
        working-directory: docker
        run: docker compose up --wait elasticsearch

      - name: Run Tests
        run: dotnet test --configuration Release --no-build --logger GitHubActions

  test-client:

    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./src/Exceptionless.Web/ClientApp

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.*
          dotnet-quality: ga

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Npm Packages
        run: npm ci

      - name: Lint Client
        run: npm run lint

      - name: Run Unit Tests
        run: echo "npm run test:unit"

      - name: Run Integration Tests
        run: echo "npm run test:integration"

  build-docker:

    runs-on: ubuntu-latest
    needs: [version]
    timeout-minutes: 30
    env:
      VERSION: ${{needs.version.outputs.version}}

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Set up Docker Buildx
        if: "${{ env.DOCKER_USERNAME != '' }}"
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Build docker images
        run: |
          echo "::remove-matcher owner=csc::"
          # build docker images

          # build remaining docker images
          for image in {"api","job","app","exceptionless"}; do
            docker buildx build . --target $image --platform linux/amd64 --tag exceptionless/$image-ci:latest --cache-from type=gha --cache-to type=gha,mode=max --load
          done

      - name: Login to GitHub Container Registry
        if: "${{ env.DOCKER_USERNAME != '' }}"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        if: "${{ env.DOCKER_USERNAME != '' }}"
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Wait for jobs
        uses: yogeshlonkar/wait-for-jobs@v0
        with:
          jobs: 'test-api,test-client'
          interval: '2500'
          ttl: '10'

      - name: Publish CI Packages
        if: "${{ env.DOCKER_USERNAME != '' }}"
        run: |
          echo "::remove-matcher owner=csc::"
          # tag and push docker images

          for image in {"api","job","app","exceptionless"}; do
            docker image tag exceptionless/$image-ci:latest exceptionless/$image-ci:$VERSION
            docker image tag exceptionless/$image-ci:latest ghcr.io/exceptionless/exceptionless/$image-ci:$VERSION
            docker image tag exceptionless/$image-ci:latest ghcr.io/exceptionless/exceptionless/$image-ci:latest

            docker image push --all-tags exceptionless/$image-ci
          done

      - name: Publish Release Packages
        if: "${{ env.DOCKER_USERNAME != '' && startsWith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request' }}"
        run: |
          echo "::remove-matcher owner=csc::"
          # tag and push docker images

          for image in {"api","job","app","exceptionless"}; do
            docker image tag exceptionless/$image-ci:latest exceptionless/$image:$VERSION
            docker image tag exceptionless/$image-ci:latest exceptionless/$image:latest

            docker image push --all-tags exceptionless/$image
          done

          # only build and push elasticsearch 7 all-in-one image for release builds
          docker buildx build --target exceptionless7 --platform linux/amd64 --output "type=image,push=true" . --tag exceptionless/exceptionless:$VERSION-elasticsearch7 --tag exceptionless/exceptionless:latest-elasticsearch7


  deploy:

    needs: [version,build-docker]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      VERSION: ${{needs.version.outputs.version}}

    steps:

      - name: Install Helm
        if: "${{ env.DOCKER_USERNAME != '' && github.event_name != 'pull_request' }}"
        uses: azure/setup-helm@v3
        with:
          version: v3.13.0

      - name: Deploy Changes to Development Environment
        if: "${{ env.DOCKER_USERNAME != '' && github.ref == 'refs/heads/main' && github.event_name != 'pull_request' }}"
        run: |
          az login --service-principal --username ${{ secrets.AZ_USERNAME }} --password ${{ secrets.AZ_PASSWORD }} --tenant ${{ secrets.AZ_TENANT }} --output none
          az aks get-credentials --resource-group exceptionless-v6 --name ex-k8s-v6
          sed -i "s/^appVersion:.*$/appVersion: '${VERSION}'/" ./k8s/exceptionless/Chart.yaml
          helm upgrade --set "version=${VERSION}" --reuse-values --values ./k8s/ex-dev-values.yaml ex-dev --namespace ex-dev ./k8s/exceptionless

      - name: Deploy Changes to Production Environment
        if: "${{ env.DOCKER_USERNAME != '' && startsWith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request' }}"
        run: |
          az login --service-principal --username ${{ secrets.AZ_USERNAME }} --password ${{ secrets.AZ_PASSWORD }} --tenant ${{ secrets.AZ_TENANT }} --output none
          az aks get-credentials --resource-group exceptionless-v6 --name ex-k8s-v6
          sed -i "s/^appVersion:.*$/appVersion: '${VERSION}'/" ./k8s/exceptionless/Chart.yaml
          helm upgrade --set "version=${VERSION}" --reuse-values --values ./k8s/ex-prod-values.yaml ex-prod --namespace ex-prod ./k8s/exceptionless
