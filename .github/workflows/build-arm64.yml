name: Build release arm64 docker images
on:
  push:
#    tags:
#      - "v*"
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Debug with tmate set "debug_enabled"'
        required: false
        default: false

jobs:
  build:
    timeout-minutes: 30
    concurrency:
      cancel-in-progress: true
      group: arm64
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.*
          #dotnet-quality: preview
      - name: Build Reason
        env:
          GITHUB_EVENT: ${{ toJson(github) }}
        run: "echo ref: ${{github.ref}} event: ${{github.event_name}}"
      - name: Build Version
        run: |
          dotnet tool install --global minver-cli --version 4.3.0
          version=$(minver --tag-prefix v)
          echo "MINVERVERSIONOVERRIDE=$version" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "### Version: $version" >> $GITHUB_STEP_SUMMARY
      - name: tmate debugging session
        uses: mxschmitt/action-tmate@v3
        #if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          limit-access-to-actor: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Docker
        run: |
          brew install --cask docker 
          open /Applications/Docker.app
          docker ps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Publish Release Packages
        run: |
          # tag and push docker image
          for image in {"api","job","app","exceptionless"}; do
            docker buildx build --target $image --platform linux/arm64 --output "type=image,push=false" . --tag exceptionless/$image:$VERSION-arm64 --tag exceptionless/$image:latest-arm64
          done
