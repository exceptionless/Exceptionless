<%
const { field, utils } = it;
const { require, _ } = utils;

function getFormatValidation(field) {
    if (field.type === "integer") {
        return `@IsInt({ message: '${field.name} must be a whole number.' })`;
    }

    if (field.type === "number") {
        return `@IsNumber({}, { message: '${field.name} must be a numeric value.' })`;
    }

    switch (field.format) {
        case "date-time":
            return `@IsDate({ message: '${field.name} must be a valid date and time.' })`;
        case "email":
            return `@IsEmail({ require_tld: false }, { message: '${field.name} must be a valid email address.' })`;
        default:
            throw new Error(`Unknown format: ${field.format}`);
    }
}

const validationDecorators = _.compact([
    !field.isRequired && field.nullable && "@IsOptional()",
    (field.name === "id" || field.name.endsWith("_id")) && `@IsMongoId({ message: '${field.name} must be a valid ObjectId.' })`,
    field.name === "url" && `@IsUrl({}, { message: '${field.name} must be a valid URL.' })`,
    !_.isUndefined(field.format) && getFormatValidation(field),
    !_.isUndefined(field.minLength) && `@MinLength(${field.minLength}, { message: '${field.name} must be at least ${field.minLength} characters long.' })`,
    !_.isUndefined(field.maxLength) && `@MaxLength(${field.maxLength}, { message: '${field.name} must be at most ${field.maxLength} characters long.' })`,
    !_.isUndefined(field.pattern) && `@Matches(${field.pattern}, { message: '${field.name} must match the pattern ${field.pattern}.' })`,
    !_.isUndefined(field.type) && (field.type === "object" || (field.type === "array" && field.items.$ref)) && `@ValidateNested({ message: '${field.name} must be a valid nested object.' })`,
]);

if (!validationDecorators.length && (field.isRequired || !field.nullable)) {
    validationDecorators.push(`@IsDefined({ message: '${field.name} is required.' })`);
}

const validationLines = _.uniq(validationDecorators).reduce((acc, validation) => [...acc, ...validation.split(/\n/g)], []);

%>
<% if (validationLines.length === 1) { %>
  <%~ validationLines[0] %>
<% } else if (validationLines.length) { %>
  <% validationLines.forEach(validation => { %>
  <%~ validation %>
  <% }) %>
<% } %>
