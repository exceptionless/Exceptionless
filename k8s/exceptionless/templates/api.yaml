apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "exceptionless.fullname" . }}-api
  labels:
    app: {{ template "exceptionless.name" . }}
    component: {{ template "exceptionless.fullname" . }}-api
    tier: {{ template "exceptionless.fullname" . }}-api
    chart: {{ template "exceptionless.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels:
      component: {{ template "exceptionless.fullname" . }}-api
  template:
    metadata:
      labels:
        app: {{ template "exceptionless.name" . }}
        component: {{ template "exceptionless.fullname" . }}-api
        tier: {{ template "exceptionless.fullname" . }}-api
        chart: {{ template "exceptionless.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
    spec:
      containers:
        - name: {{ template "exceptionless.name" . }}-api
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              memory: 3Gi
              cpu: 500m
            limits:
              memory: 4Gi
              cpu: 3000m
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ template "exceptionless.fullname" . }}-config
          env:
            - name: RunJobsInProcess
              value: 'false'
{{- if (empty .Values.storage.azureConnectionString) }}
          volumeMounts:
            - mountPath: "/app/storage"
              name: storage
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: {{ template "exceptionless.fullname" . }}-storage
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "exceptionless.fullname" . }}-api
  labels:
    app: {{ template "exceptionless.name" . }}
    component: {{ template "exceptionless.fullname" . }}-api
    chart: {{ template "exceptionless.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    component: {{ template "exceptionless.fullname" . }}-api

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "exceptionless.fullname" . }}-api-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,If-Modified-Since,Cache-Control,Content-Type,Authorization,ETag,Link,v,X-Requested-With,X-Exceptionless-Client,X-Result-Count,X-RateLimit-Limit,X-RateLimit-Remaining,X-Exceptionless-ConfigVersion"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    - {{.Values.api.domain}}
    secretName: {{ template "exceptionless.fullname" . }}-api-tls
  rules:
  - host: {{.Values.api.domain}}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ template "exceptionless.fullname" . }}-api
          servicePort: 80
